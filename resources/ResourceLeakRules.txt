<android.media.AudioManager: int requestAudioFocus(AudioFocusRequest)>;<android.media.AudioManager: int abandonAudioFocusRequest(OnAudioFocusChangeListener)>
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)>;<android.media.AudioManager: int abandonAudioFocusRequest(OnAudioFocusChangeListener)>
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)>;<android.media.AudioManager: int abandonAudioFocusRequest(OnAudioFocusChangeListener)>
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)>;<android.media.AudioManager: int abandonAudioFocusRequest(OnAudioFocusChangeListener)>
<android.media.AudioManager: int requestAudioFocus(AudioFocusRequest,AudioPolicy)>;<android.media.AudioManager: int abandonAudioFocusRequest(OnAudioFocusChangeListener)>
<android.media.AudioRecord: AudioRecord <init>(int,int,int,int,int)>;<android.media.AudioRecord: void release()>
<android.media.AudioRecord: AudioRecord <init>(AudioAttributes,AudioFormat,int,int)>;<android.media.AudioRecord: void release()>
<android.hardware.Camera: void lock()>;<android.hardware.Camera: void unlock()>
<android.hardware.Camera: Camera open()>;<android.hardware.Camera: void release()>
<android.hardware.Camera: void startFaceDetection()>;<android.hardware.Camera: void stopFaceDetection()>
<android.hardware.Camera: void startPreview()>;<android.hardware.Camera: void stopPreview()>
<android.hardware.SensorManager: boolean registerListener(SensorEventListener,Sensor,int)>;<android.hardware.SensorManager: void unregisterListener(SensorEventListener)>
<android.hardware.SensorManager: boolean registerListener(SensorListener,int)>;<android.hardware.SensorManager: void unregisterListener(SensorEventListener)>
<android.hardware.SensorManager: boolean registerListener(SensorListener,int,int)>;<android.hardware.SensorManager: void unregisterListener(SensorEventListener)>
<android.hardware.SensorManager: boolean registerListener(SensorEventListener,Sensor,int,int)>;<android.hardware.SensorManager: void unregisterListener(SensorEventListener)>
<android.hardware.SensorManager: boolean registerListener(SensorEventListener,Sensor,int,Handler)>;<android.hardware.SensorManager: void unregisterListener(SensorEventListener)>
<android.hardware.SensorManager: boolean registerListener(SensorEventListener,Sensor,int,int,Handler)>;<android.hardware.SensorManager: void unregisterListener(SensorEventListener)>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,LocationListener)>;<android.location.LocationManager: void removeUpdates(LocationListener)>
<android.os.Vibrator: void vibrate(VibrationEffect)>;<android.os.Vibrator: void cancel()>
<android.net.wifi.WifiManager.WifiLock: void acquire()>;<android.net.wifi.WifiManager.WifiLock: void release()>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>;<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int)>;<android.database.sqlite.SQLiteClosable: void releaseReference()>
<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openOrCreateDatabase(File,CursorFactory);<android.database.sqlite.SQLiteClosable: void releaseReference()>
<android.database.sqlite.SQLiteCursor: SQLiteCursor <init>(SQLiteDatabase,SQLiteCursorDriver,String,SQLiteQuery)>;<android.database.sqlite.SQLiteCursor: void close()>
<android.database.sqlite.SQLiteOpenHelper: SQLiteOpenHelper <init>(Context,String,CursorFactory,int,DatabaseErrorHandler)>;<android.database.sqlite.SQLiteOpenHelper: void close()>
<android.os.ParcelFileDescriptor: ParcelFileDescriptor open(File,int)>;<android.os.ParcelFileDescriptor: void close()>
<android.os.Parcel: Parcel obtain()>;<android.os.Parcel: void finalize()>
<android.os.PowerManager.WakeLock: void acquire()>;<android.os.PowerManager.WakeLock: void release()>